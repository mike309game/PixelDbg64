PixelDbg64

Hacky fork of PixelDbg to allow opening large files (>2GB)

/***************************************************************************
 *                                                                         *
 *   Copyright (C) 2013-2014 Nikita Kindt (n.kindt.pdbg@gmail.com)         *
 *                                                                         *
 *   File is part of PixelDbg:                                             *
 *   https://sourceforge.net/projects/pixeldbg/                            *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 *                                                                         *
 ***************************************************************************/

1. About

PixelDbg allows you to open any data stream and look at it. All data given to PixelDbg will be displayed in the main window with the ability to scroll through it and change various parameters to help find or inspect images in the stream. Large unknown archives can be checked for images if they are not compressed or encrypted. Compressed or encrypted
data can be easily discovered with noise in the image (due to high entropy).

Current features:

* Rifle through gigabytes (and terabytes :^) ) of data visually (unknown archives, OS swap files, etc.)
* Change pixelformat, scanline, tiling, etc on the fly to find images in any data
* Visually tell if data might be compressed, encrypted or compressable
* Save current view as an image for later analysis
* Successfully compiled and tested on Windows 7, Knoppix, Ubuntu and Raspbian-wheezy

Current limitations:

* Maximum image resolution is 1024x1024
* Window resize is clamped to maximum resolution
* Pixel format maximum is 32 bpp with no more then 8 bit per channel (i.e. valid format is 5.5.5.1 but not 9.9.9.5)
* RLE mode is unpredictable in compression ratio, scrollbar can misbehave
* Scrollbar buttons will wrap back to offset 0 when offset is >2GB. This is an FLTK issue.
* PixelDbg was tested only on little-endian machines




2. Compile with MinGW

* Download FLTK 1.3.x and compile (in CMake choose mingw makefile).
* Execute make.bat in PixelDbg folder with the first argument being the path to extracted FLTK directory and second argument being the path to the compiled "libfltk.a".

  Example:
  make C:\Path\To\fltk C:\Path\To\fltk\bin-mingw\lib



3. Compile on Linux

* Download FLTK 1.3.x and compile (in CMake disable XDBE, XFT and XINERAMA options - if enabled -lXft and -lXinemara libs must be provided to the linker).
* Execute make.sh in PixelDbg folder with the first argument being the path to extracted FLTK directory and second argument being the path to the compiled "libfltk.a".

  Example:
  ./make.sh ./fltk ./fltk/bin-linux/lib

3.1. Compile on Raspberry Pi (Raspbian Wheezy distro - 26.07.2013)

* Download FLTK 1.3.x.
* If X11 dev libs are not present on the system get them as well ("apt-get install libx11-dev").
* Make sure to provide USE_X11 preprocessor define in any makefile otherwise FLTK will abort compilation with "unsupported platform" error.
* Compile FLTK without XDBE.
* Execute make.sh in PixelDbg folder with the first argument being the path to extracted FLTK directory and second argument being the path to the compiled "libfltk.a".
